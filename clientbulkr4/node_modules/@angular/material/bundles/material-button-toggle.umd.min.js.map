{"version":3,"file":"material-button-toggle.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      this.valueChange.emit(value);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n  private _value: any = null;\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** The currently selected button toggle, should match the value. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n  private _selected: MatButtonToggle | null = null;\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (this._isSingleSelector && value) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = value;\n\n    if (value && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n  private _checked: boolean = false;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n  private _value: any = null;\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","mixinDisabled","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatButtonToggleGroup","multi","_uniqueIdCounter","MatButtonToggleChange","_changeDetector","_this","_super","call","_controlValueAccessorChangeFn","_onTouched","_name","_vertical","_value","valueChange","EventEmitter","_selected","change","tslib_1.__extends","defineProperty","value","_updateButtonToggleNames","coerceBooleanProperty","emit","_updateSelectedButtonToggleFromValue","selected","checked","_buttonToggles","forEach","toggle","name","isAlreadySelected","matchingButtonToggle","filter","buttonToggle","_emitChangeEvent","event","source","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_markButtonTogglesForCheck","_markForCheck","type","Directive","args","selector","providers","inputs","host","role","class","[class.mat-button-toggle-vertical]","exportAs","ChangeDetectorRef","ContentChildren","MatButtonToggle","Input","vertical","Output","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_changeDetectorRef","_buttonToggleDispatcher","_elementRef","_focusMonitor","ariaLabel","ariaLabelledby","_isSingleSelector","_removeUniqueSelectionListener","_checked","_disabled","buttonToggleGroup","buttonToggleGroupMultiple","listen","id","_type","notify","ngOnInit","monitor","nativeElement","focus","_inputElement","_toggle","_onInputChange","stopPropagation","groupValueChanged","_onInputClick","ngOnDestroy","Component","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[attr.id]","UniqueSelectionDispatcher","ElementRef","FocusMonitor","propDecorators","ViewChild","MatButtonToggleModule","NgModule","imports","MatCommonModule","A11yModule","exports","declarations","UNIQUE_SELECTION_DISPATCHER_PROVIDER"],"mappings":"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"}